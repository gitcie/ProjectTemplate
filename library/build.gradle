def isDebug = true
if(isDebug){
    apply plugin: 'com.android.application'
}else{
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: 'maven.gradle'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        if(isDebug){
            applicationId 'boanda.android.template.library'
            multiDexEnabled true
        }
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            if(isInJenkins()) {
                def storePath = System.getenv("SIGNING_KEYSTORE")
                def storePass = System.getenv("SIGNING_KEY_PASSWORD")
                println("签名文件地址：${storePath}" )
                println("签名文件密码：${storePass}" )
                storeFile file(storePath)
                storePassword storePass
                keyAlias "androiddebugkey"
                keyPassword storePass
            }else{
                println("签名文件密码" )
                storeFile file('/Users/powerdata/workspace/Android/release.keystore')
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets{
        main{
            if(isDebug){
                java.srcDirs = ['src/main/java', 'src/main/kotlin', 'src/main/debug/kotlin']
                res.srcDirs = ['src/main/res', 'src/main/debug/res']
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            }else{
                java.srcDirs = ['src/main/java', 'src/main/kotlin']
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
            }
        }
    }

    applicationVariants.all {
        variant ->
            variant.outputs.all {
                if (buildType.name == 'release'){
                    def timeStr = new Date().format("yyyyMMddHHmm")
                    outputFileName = "Template_${defaultConfig.versionName}_${timeStr}_${buildType.name}.apk"
                }
            }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:${rootProject.ext.support_version}"
    implementation "com.android.support.constraint:constraint-layout:${rootProject.ext.constraint_version}"

    //第三方
    implementation rootProject.ext.dependencies["kotlin-jdk7"]
    implementation rootProject.ext.dependencies["kotlin-reflect"]

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

static boolean isInJenkins() {
    Map<String, String> map = System.getenv()
    if (map == null) {
        return false
    }
    String str = map.get("JENKINS_HOME")
    return str != null && str.contains("Jenkins")
}
